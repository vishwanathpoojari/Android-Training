import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class PrimeSumCalculator implements Runnable {
    private final int start;
    private final int end;
    private final long[] primeSum;

    public PrimeSumCalculator(int start, int end, long[] primeSum) {
        this.start = start;
        this.end = end;
        this.primeSum = primeSum;
    }

    @Override
    public void run() {
        long sum = 0;
        for (int i = start; i <= end; i++) {
            if (isPrime(i)) {
                sum += i;
            }
        }
        primeSum[0] += sum;
    }

    private boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}

public class ParallelPrimeSumExample {
    public static void main(String[] args) {
        int limit = 1000; // Specify the upper limit for prime numbers
        int numThreads = Runtime.getRuntime().availableProcessors();
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);
        long[] primeSum = {0}; // Array to hold the sum (using an array to make it effectively final for lambda expression)
        int segmentSize = limit / numThreads;
        for (int i = 0; i < numThreads; i++) {
            int start = i * segmentSize + 1;
            int end = (i == numThreads - 1) ? limit : (i + 1) * segmentSize;
            executor.execute(new PrimeSumCalculator(start, end, primeSum));
        }

        executor.shutdown();
        while (!executor.isTerminated()) {
        }

        System.out.println("Sum of prime numbers up to " + limit + ": " + primeSum[0]);
    }
}
